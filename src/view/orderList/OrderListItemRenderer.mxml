<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				width="100%" 
				minHeight="87"
				autoDrawBackground="false"
				styleName="orderListItemRenderer">
	
	<fx:Script>
		<![CDATA[
			import service.OrderService;
			
			import vo.Chips;
			import vo.Drink;
			import vo.Order;
			import vo.Sandwich;
			
			[Bindable]
			private var _order:Order;
			
			override public function set data(value:Object):void
			{
				super.data = value;
				if (!value) return;
				var isOdd:Boolean = itemIndex/2 is int;
				odd.visible = isOdd;
				even.visible = !isOdd;
				_order = value as Order;
				
				setChildren();
			}
			private function setChildren():void
			{
				gridUserName.text = _order.name;
				gridOrderTime.text = _order.friendlyTime;
				
				sandwichContainer.removeAllElements();
				for (var a:int=0; a<_order.sandwiches.length; a++)
				{
					var sand:Sandwich = _order.sandwiches[a];
					var nameLabel:Label = new Label();
					nameLabel.percentWidth = 100;
					nameLabel.maxDisplayedLines = 1;
					nameLabel.styleName = 'gridSandName';
					nameLabel.text = sand.name;
					sandwichContainer.addElement(nameLabel);
					
					var optsLabel:Label = new Label();
					optsLabel.percentWidth = 100;
					optsLabel.styleName = 'gridSandOpts';
					optsLabel.text = sand.options;
					sandwichContainer.addElement(optsLabel);
				}
				chipsContainer.removeAllElements();
				if (_order.chips.length > 0)
				{
					var chipLabel:Label = new Label();
					chipLabel.styleName = 'gridChipsStatic';
					chipLabel.text = 'Chips';
					chipsContainer.addElement(chipLabel);
				}
				for (var b:int=0; b<_order.chips.length; b++)
				{
					var chip:Chips = _order.chips[b];
					var chip2Label:Label = new Label();
					chip2Label.percentWidth = 100;
					chip2Label.maxDisplayedLines = 1;
					chip2Label.styleName = 'gridChipsName';
					chip2Label.text = chip.name;
					chipsContainer.addElement(chip2Label);
				}
				
				
				drinkContainer.removeAllElements();
				if (_order.drinks.length > 0)
				{
					var drinkLabel:Label = new Label();
					drinkLabel.styleName = 'gridDrinkStatic';
					drinkLabel.text = 'Drinks';
					drinkContainer.addElement(drinkLabel);
				}
				for (var c:int=0; c<_order.drinks.length; c++)
				{
					var drink:Drink = _order.drinks[c];
					var drink2Label:Label = new Label();
					drink2Label.percentWidth = 100;
					drink2Label.maxDisplayedLines = 1;
					drink2Label.styleName = 'gridDrinkName';
					drink2Label.text = drink.name;
					drinkContainer.addElement(drink2Label);
				}
			}
			
			protected function fulfilledContainer_clickHandler(event:MouseEvent):void
			{
				trace('fulfilledContainer_clickHandler');
				OrderService.getInstance().orderComplete(_order.orderId);
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected" />
	</s:states>
	
	
	<s:Rect id="odd" width="100%" height="100%" visible="false">
		<s:fill>
			<s:SolidColor color="#252525" />
		</s:fill>
	</s:Rect>
	<s:Rect id="even" width="100%" height="100%" visible="false">
		<s:fill>
			<s:SolidColor color="#000000" />
		</s:fill>
	</s:Rect>
	<s:Rect left="0" top="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="#505050" weight="1" />
		</s:stroke>
	</s:Rect>
	<s:HGroup width="100%" gap="0" minHeight="87" verticalAlign="middle" paddingTop="20" paddingBottom="20">
		<s:VGroup width="145" paddingLeft="20" paddingRight="20" gap="0">
			<s:Label id="gridUserName" width="100%" styleName="gridUserName" />
			<s:Label id="gridOrderTime" width="100%" styleName="gridOrderTime" />
		</s:VGroup>
		<s:VGroup id="sandwichContainer" width="393" paddingLeft="20" paddingRight="20" gap="0" />
		<s:VGroup id="chipsContainer" width="156" paddingLeft="20" paddingRight="20" gap="0" />
		<s:VGroup id="drinkContainer" width="166" paddingLeft="20" paddingRight="20" gap="0" />
	</s:HGroup>
	<s:Group id="fulfilledContainer" right="0" width="124" height="100%" click="fulfilledContainer_clickHandler(event)">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry ratio="0" color="#d4dc21" />
					<s:GradientEntry ratio="1" color="#b2b91c" />
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:Label verticalCenter="0" horizontalCenter="0" text="READY!" styleName="readyCopy">
			<s:filters>
				<s:DropShadowFilter alpha=".38" color="#000000" distance="1" angle="30"/>
			</s:filters>
		</s:Label>
	</s:Group>
	<s:Rect x="145" width="1" height="100%">
		<s:fill>
			<s:SolidColor color="#505050" />
		</s:fill>
	</s:Rect>
	<s:Rect x="538" width="1" height="100%">
		<s:fill>
			<s:SolidColor color="#505050" />
		</s:fill>
	</s:Rect>
	<s:Rect x="694" width="1" height="100%">
		<s:fill>
			<s:SolidColor color="#505050" />
		</s:fill>
	</s:Rect>
	<s:Rect x="860" width="1" height="100%">
		<s:fill>
			<s:SolidColor color="#505050" />
		</s:fill>
	</s:Rect>
	<!-- 145, 393, 156, 166, 124 -->
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:ItemRenderer>
